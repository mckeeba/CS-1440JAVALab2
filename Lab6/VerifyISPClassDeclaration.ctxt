#BlueJ class context
comment0.target=VerifyISPClassDeclaration
comment0.text=\n\ Check\ for\ the\ existance\ and\ type\ of\ each\ field.\ Check\ for\ the\ existance\ and\n\ return\ type\ of\ accessors\ for\ each\ field.\ Check\ for\ the\ existance\ and\n\ parameter\ type\ of\ mutators\ for\ each\ field.\ Check\ for\ the\ existance\ of\ a\ noarg\n\ constructor.\ Check\ for\ the\ existance\ of\ a\ constructor\ which\ sets\ all\ fields\n\ using\ parameters.\n\ \n\ DOES\ NOT\ CHECK\ ANY\ FUNCTIONALITY.\n\ \n\ @author\ Joel\ Swanson\n\ @version\ 02.09.2014\n
comment1.params=
comment1.target=VerifyISPClassDeclaration()
comment1.text=\n\ No-arg\ constructor\ for\ test\ class\ VerifyClassDeclaration.\n
comment10.params=parameters
comment10.target=void\ checkConstructor(java.lang.String[])
comment10.text=\n\ Tests\ for\ a\ constructor\ with\ a\ given\ number\ and\ type\ of\ parameters.\n\ \n\ @param\ parameters\n\ \ \ \ \ \ \ \ \ \ \ \ A\ variable\ list\ of\ parameter\ types\ as\ Strings.\ Put\ any\ types\n\ \ \ \ \ \ \ \ \ \ \ \ and\ this\ method\ will\ attempt\ to\ find\ a\ constructor\ with\ those\n\ \ \ \ \ \ \ \ \ \ \ \ types\ in\ the\ specified\ order.\n
comment11.params=parameters
comment11.target=java.lang.String\ getParameterList(java.lang.String[])
comment11.text=\n\ Return\ the\ parameters\ as\ a\ comma\ separated\ list\ or\ return\ none.\n\ \n\ @param\ parameters\n\ \ \ \ \ \ \ \ \ \ \ \ List\ of\ parameter\ types\ as\ strings.\n\ \n\ @return\ Returns\ all\ parameters\ as\ a\ single\ comma\ separated\ list.\n
comment12.params=parameters
comment12.target=java.lang.Class[]\ getClassArray(java.lang.String[])
comment12.text=\n\ Turn\ a\ string\ array\ of\ types\ into\ an\ array\ of\ Class\ types.\n\ \n\ @param\ parameters\n\ \ \ \ \ \ \ \ \ \ \ \ A\ list\ of\ parameter\ types\ as\ Strings.\n\ \n\ @return\ Returns\ an\ array\ of\ Class\ objects\ based\ on\ the\ parameter\ list\n\ \ \ \ \ \ \ \ \ which\ are\ String\ objects.\n
comment13.params=name\ expectedType
comment13.target=void\ checkOneField(java.lang.String,\ java.lang.String)
comment13.text=\n\ Test\ Chalk\ class\ for\ a\ specific\ field\ name\ and\ correct\ type.\n\ \n\ @param\ name\n\ \ \ \ \ \ \ \ \ \ \ \ Make\ sure\ Chalk\ has\ a\ field\ of\ this\ name.\n\ @param\ expectedType\n\ \ \ \ \ \ \ \ \ \ \ \ Make\ sure\ the\ name\ field\ has\ this\ type.\n
comment14.params=name\ expectedType
comment14.target=void\ checkOneAccessor(java.lang.String,\ java.lang.String)
comment14.text=\n\ Test\ the\ Chalk\ class\ for\ a\ specific\ accessor\ for\ existance\ and\ type.\n\ \n\ @param\ name\n\ \ \ \ \ \ \ \ \ \ \ \ The\ expected\ name\ of\ the\ accessor.\n\ @param\ expectedType\n\ \ \ \ \ \ \ \ \ \ \ \ The\ expected\ return\ type\ of\ the\ accessor\ of\ this\ type.\n
comment15.params=name\ expectedType
comment15.target=void\ checkOneMutator(java.lang.String,\ java.lang.String)
comment15.text=\n\ Test\ the\ Chalk\ class\ for\ a\ specific\ accessor\ for\ existance\ and\ type.\n\ \n\ @param\ name\n\ \ \ \ \ \ \ \ \ \ \ \ The\ expected\ name\ of\ the\ accessor.\n\ @param\ expectedType\n\ \ \ \ \ \ \ \ \ \ \ \ The\ expected\ parameter\ type\ of\ the\ accessor\ of\ this\ type.\n
comment16.params=methodName\ retType\ paramTypeNames
comment16.target=void\ checkOneOtherMethod(java.lang.String,\ java.lang.String,\ java.lang.String[])
comment16.text=\n\ Tests\ the\ class\ for\ the\ given\ method,\ name,\ parameters,\ and\ return.\n\ \n\ @param\ methodName\n\ \ \ \ \ \ \ \ \ \ The\ expected\ method\ name.\n\ @param\ retType\n\ \ \ \ \ \ \ \ \ \ The\ expected\ method\ return\ type.\n\ @param\ paramTypeNames\n\ \ \ \ \ \ \ \ \ \ The\ expected\ method\ parameter\ types.\n
comment17.params=expectedType
comment17.target=java.lang.Class\ getClass(java.lang.String)
comment17.text=\n\ Turn\ a\ string\ class\ description\ into\ a\ class\ type.\n\ \n\ @param\ expectedType\n\ \ \ \ \ \ \ \ \ \ \ \ The\ string\ representation\ of\ a\ type.\ For\ example\ "int",\n\ \ \ \ \ \ \ \ \ \ \ \ "double",\ "java.lang.String",\ etc...\n\ \n\ @return\ Return\ the\ class\ definition\ of\ a\ string\ representation\ of\ a\ type.\n
comment18.params=grade
comment18.target=void\ printGrade(int)
comment18.text=\n\ Store\ the\ grade\ then\ print\ the\ report.\ The\ report\ only\ prints\ after\ a\n\ fail.\ So\ this\ is\ the\ final\ grade.\n\ \n\ @param\ grade\n\ \ \ \ \ \ \ \ \ \ \ \ The\ grade\ for\ failing\ at\ this\ point.\n
comment19.params=
comment19.target=java.lang.String\ gradeReport()
comment19.text=\n\ Creates\ a\ string\ with\ the\ grades\ for\ output.\n\ \n\ @return\ Returns\ the\ grade\ report\ as\ a\ string\ for\ use\ elsewhere.\n
comment2.params=
comment2.target=void\ setUp()
comment2.text=\n\ Sets\ up\ the\ test\ fixture.\n\ \n\ Called\ before\ every\ test\ case\ method.\n
comment3.params=
comment3.target=void\ tearDown()
comment3.text=\n\ Tears\ down\ the\ test\ fixture.\n\ \n\ Called\ after\ every\ test\ case\ method.\n
comment4.params=
comment4.target=void\ checkFieldsAccessorsMutators()
comment4.text=\n\ Test\ fields,\ accessors,\ and\ mutators.\n
comment5.params=
comment5.target=void\ checkClass()
comment5.text=\n\ Check\ that\ the\ class\ is\ properly\ named.\n
comment6.params=
comment6.target=void\ checkFields()
comment6.text=\n\ Check\ that\ all\ fields\ exist\ as\ named.\ Check\ that\ all\ fields\ are\ of\ the\n\ correct\ type.\ Check\ that\ all\ fields\ are\ private.\n
comment7.params=
comment7.target=void\ checkAccessors()
comment7.text=\n\ Check\ that\ all\ the\ accessors\ are\ correct.\n
comment8.params=
comment8.target=void\ checkMutators()
comment8.text=\n\ Check\ that\ all\ the\ mutators\ are\ correct.\n
comment9.params=
comment9.target=void\ checkOtherMethods()
comment9.text=\n\ Check\ that\ all\ the\ other\ methods\ are\ correct.\n
numComments=20
