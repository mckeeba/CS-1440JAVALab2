#BlueJ class context
comment0.target=TestPrelab1
comment0.text=\n\ Check\ for\ the\ existance\ and\ type\ of\ each\ field.\n\ Check\ for\ the\ existance\ and\ return\ type\ of\ \n\ \ \ \ \ \ accessors\ for\ each\ field.\n\ Check\ for\ the\ existance\ and\ parameter\ type\ of\n\ \ \ \ \ \ mutators\ for\ each\ field.\n\ Check\ for\ the\ existance\ of\ a\ noarg\ constructor.\n\ Check\ for\ the\ existance\ of\ a\ constructor\ which\n\ \ \ \ \ \ sets\ all\ fields\ using\ parameters.\n\ Check\ for\ other\ listed\ methods.\n\ \ \ \ \ \ \n\ DOES\ NOT\ CHECK\ ANY\ FUNCTIONALITY.\n\ You\ must\ use\ fully\ qualified\ class\ names\n\ such\ as\ java.util.Scanner\n\ \n\ @author\ Joel\ Swanson\n\ @version\ 03.07.2014\n
comment1.params=
comment1.target=void\ checkPrelab1()
comment1.text=\n\ Test\ Scene\ class\ from\ activity\ 4.\n
comment10.params=
comment10.target=void\ checkFields()
comment10.text=\n\ Check\ that\ all\ fields\ exist\ as\ named.\n\ Check\ that\ all\ fields\ are\ of\ the\ correct\ type.\n\ Check\ that\ all\ fields\ are\ private.\n
comment11.params=
comment11.target=void\ checkAccessors()
comment11.text=\n\ Check\ that\ all\ the\ accessors\ are\ correct.\n
comment12.params=
comment12.target=void\ checkMutators()
comment12.text=\n\ Check\ that\ all\ the\ mutators\ are\ correct.\n
comment13.params=parameters
comment13.target=void\ checkConstructor(java.lang.String[])
comment13.text=\n\ Tests\ for\ a\ constructor\ with\ a\ given\ number\ and\n\ type\ of\ parameters.\n\ \n\ @param\ parameters\ A\ variable\ list\ of\ parameter\ types\n\ as\ Strings.\ \ Put\ any\ types\ and\ this\ method\ will\n\ attempt\ to\ find\ a\ constructor\ with\ those\ types\ in\n\ the\ specified\ order.\n
comment14.params=testClass
comment14.target=void\ checkNoCopyConstructor(java.lang.Class)
comment14.text=\n\ Tests\ that\ a\ copy\ constructor\ was\ not\ created.\n\ \n\ @param\ testClass\ This\ objects\ class\ type.\ \ A\ copy\ constructor\n\ would\ have\ an\ object\ of\ this\ type\ as\ a\ parameter.\n
comment15.params=name\ expectedReturn\ parameters
comment15.target=void\ checkMethod(java.lang.String,\ java.lang.String,\ java.lang.String[])
comment15.text=\n\ Tests\ for\ a\ constructor\ with\ a\ given\ number\ and\n\ type\ of\ parameters.\n\ \n\ @param\ name\ Search\ for\ a\ method\ with\ this\ name.\n\ @param\ expectedReturn\ Expected\ type\ of\ the\ return.\n\ @param\ parameters\ A\ variable\ list\ of\ parameter\ types\n\ as\ Strings.\ \ Put\ any\ types\ and\ this\ method\ will\n\ attempt\ to\ find\ a\ constructor\ with\ those\ types\ in\n\ the\ specified\ order.\n
comment16.params=parameters
comment16.target=java.lang.String\ getParameterList(java.lang.String[])
comment16.text=\n\ Return\ the\ parameters\ as\ a\ comma\ separated\ list\n\ or\ return\ none.\n\ \n\ @param\ parameters\ List\ of\ parameter\ types\ as\ strings.\n\ \n\ @return\ Returns\ all\ parameters\ as\ a\ single\ comma\n\ separated\ list.\n
comment17.params=parameters
comment17.target=java.lang.Class[]\ getTypeClassArray(java.lang.String[])
comment17.text=\n\ Turn\ a\ string\ array\ of\ types\ into\ an\ array\ of\ Class\ types.\n\ \n\ @param\ parameters\ A\ list\ of\ parameter\ types\ as\ Strings.\n\ \n\ @return\ Returns\ an\ array\ of\ Class\ objects\ based\ on\ the\n\ parameter\ list\ which\ are\ String\ objects.\n
comment18.params=name\ expectedType
comment18.target=void\ checkOneField(java.lang.String,\ java.lang.String)
comment18.text=\n\ Test\ class\ for\ a\ specific\ field\ name\ and\ correct\ type.\n\ \n\ @param\ name\ Make\ sure\ Chalk\ has\ a\ field\ of\ this\ name.\n\ @param\ expectedType\ Make\ sure\ the\ name\ field\ has\ this\ type.\n
comment19.params=name\ expectedType
comment19.target=void\ checkOneAccessor(java.lang.String,\ java.lang.String)
comment19.text=\n\ Test\ class\ for\ a\ specific\ accessor\ for\ existance\ and\ type.\n\ @param\ name\ The\ expected\ name\ of\ the\ accessor.\n\ @param\ expectedType\ The\ expected\ return\ type\ of\ the\ accessor\n\ of\ this\ type.\n
comment2.params=
comment2.target=void\ checkPrevious()
comment2.text=\n\ Run\ previous\ tests;\ TestHouseActivity2.\n
comment20.params=name\ expectedType
comment20.target=void\ checkOneMutator(java.lang.String,\ java.lang.String)
comment20.text=\n\ Test\ class\ for\ a\ specific\ accessor\ for\ existance\ and\ type.\n\ @param\ name\ The\ expected\ name\ of\ the\ accessor.\n\ @param\ expectedType\ The\ expected\ parameter\ type\ of\ the\ accessor\n\ of\ this\ type.\n
comment21.params=expectedType
comment21.target=java.lang.Class\ getTypeClass(java.lang.String)
comment21.text=\n\ Turn\ a\ string\ class\ description\ into\ a\ class\ type.\n\ \n\ @param\ expectedType\ The\ string\ representation\ of\ a\ type.\n\ For\ example\ "int",\ "double",\ "java.lang.String",\ etc...\n\ \n\ @return\ Return\ the\ class\ definition\ of\ a\ string\ representation\n\ of\ a\ type.\n
comment3.params=
comment3.target=void\ checkStyle()
comment3.text=\n\ Test\ for\ style\ issues\ in\ all\ classes.\n
comment4.params=
comment4.target=void\ checkSilent()
comment4.text=\n\ Run\ all\ tests.\n
comment5.params=
comment5.target=void\ check()
comment5.text=\n\ Test\ fields,\ accessors,\ and\ mutators.\n
comment6.params=
comment6.target=void\ printHeader()
comment6.text=\n\ Print\ a\ standard\ header.\ Useful\ if\ testing\ multiple\n\ classes\ for\ proper\ declaration.\n
comment7.params=
comment7.target=void\ checkClass()
comment7.text=\n\ Check\ that\ the\ class\ is\ properly\ named.\n
comment8.params=
comment8.target=void\ checkMain()
comment8.text=\n\ Check\ to\ see\ if\ a\ properly\ declared\ main\ exists.\n\ public,\ static,\ and\ void\ with\ String[]\ parameter.\n
comment9.params=low\ high
comment9.target=void\ checkFieldNumber(int,\ int)
comment9.text=\n\ Check\ for\ the\ correct\ number\ of\ fields.\n\ @param\ low\ The\ smallest\ number\ of\ fields\ allowed.\n\ @param\ high\ The\ largest\ number\ of\ fields\ allowed.\n
numComments=22
