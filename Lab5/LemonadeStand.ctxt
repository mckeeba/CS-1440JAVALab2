#BlueJ class context
comment0.target=LemonadeStand
comment0.text=\n\ Short,\ one-line\ description\ of\ LemonadeStand\ class\ here.\n\ \n\ Optionally,\ include\ a\ paragraph\ that\ provides\ a\ more\ \n\ detailed\ description.\n\n\ @author\ (your\ name)\ \n\ @version\ (a\ version\ number\ or\ a\ date)\n
comment1.params=
comment1.target=LemonadeStand()
comment1.text=\n\ No\ parameter\ constructor\ for\ objects\ of\ class\ LemonadeStand.\n
comment10.params=newLemons
comment10.target=void\ setLemons(int)
comment10.text=\n\ @param\ newLemons\ new\ set\ of\ lemons\n
comment11.params=newGallonsOfWater
comment11.target=void\ setGallonsOfWater(int)
comment11.text=\n\ @param\ newGallonsOfWater\ new\ gallons\ of\ water\n
comment12.params=newCupsOfSugar
comment12.target=void\ setCupsOfSugar(int)
comment12.text=\n\ @param\ newCupsOfSugar\ new\ cups\ of\ sugar\n
comment13.params=newEmptyGlasses
comment13.target=void\ setEmptyGlasses(int)
comment13.text=\n\ @param\ newEmptyGlasses\ new\ set\ of\ empty\ glasses\n
comment14.params=newGlassesOfLemonade
comment14.target=void\ setGlassesOfLemonade(int)
comment14.text=\n\ @param\ newGlassesOfLemonade\ new\ glasses\ of\ Lemonade\n
comment15.params=newPrice
comment15.target=void\ setPrice(double)
comment15.text=\n\ @param\ newPrice\ a\ new\ price\n
comment16.params=newIncome
comment16.target=void\ setIncome(double)
comment16.text=\n\ @param\ newIncome\ a\ new\ income\n
comment17.params=
comment17.target=int\ makeLemonade()
comment17.text=\n\ This\ method\ and\ its\ if\ statement\ check\ to\ make\ sure\ we\ can\ make\ \n\ lemonade.\ \n\ So\ as\ long\ as\ we\ have\ the\ corresponding\ ingredients,\ we\ can\ make\ lemonade\n\ (return\ 8).\ Else\ if\ not\ we\ return\ 0,\ and\ therefore\ we\ cannot\ \n\ make\ lemonade.\n\ @return\ 8\ or\ 0\n
comment18.params=
comment18.target=int\ sellLemonade()
comment18.text=\n\ This\ method\ and\ its\ corresponding\ if\ statements\ tell\ us\ \n\ that\ if\ glasses\ of\ \n\ lemonade\ is\ equal\ to\ zero,\ and\ we\ can't\ make\ lemonade\ because\ the\ method\ \n\ makeLemonade\ does\ not\ return\ 8,\ then\ we\ can't\ sell\ Lemonade(return\ 0).\ \n\ Else\ \n\ if\ neither\ of\ the\ above\ are\ true\ we\ can\ sell\ Lemonade\ therefore\ return\ 1.\n\ @return\ 0\ or\ 1\n
comment19.params=requestedGlasses
comment19.target=int\ sellMoreLemonade(int)
comment19.text=\n\ This\ method\ has\ a\ while\ loop\ and\ an\ if\ statement.\ The\ while\ loop\ will\ run\n\ until\ soldGlasses\ is\ equal\ to\ the\ requested\ glasses.\ Then\ our\ if\n\ statement\ checks\ to\ make\ sure\ we\ have\ lemonade\ to\ sell,\ if\ we\ don't\n\ the\ loop\ will\ break\ out.\ If\ we\ do\ sold\ glasses\ will\ continue\ to\ go\ up.\n\ @return\ soldGlasses\n\ @param\ requestedGlasses\ a\ request\ for\ glasses\n
comment2.params=initLemons\ initGallonsOfWater\ initCupsOfSugar\ initEmptyGlasses\ initPrice
comment2.target=LemonadeStand(int,\ int,\ int,\ int,\ double)
comment2.text=\n\ @param\ initLemons\ initial\ lemons\n\ @param\ initCupsOfSugar\ inital\ cup\ of\ sugar\n\ @param\ initGallonsOfWater\ inital\ gallons\ of\ water\n\ @param\ initEmptyGlasses\ inital\ empty\ glasses\ of\ water\n\ @param\ initPrice\ inital\ price\n\ \n\ \n
comment20.params=args
comment20.target=void\ main(java.lang.String[])
comment20.text=\n\ Main\ method\ for\ testing\ LemonadeStand.\n\ @param\ args\ For\ the\ lemonade\ stand\ methods\n
comment3.params=
comment3.target=int\ getLemons()
comment3.text=\n@return\ y\ \n
comment4.params=
comment4.target=int\ getGallonsOfWater()
comment4.text=\n\ @return\ x\n
comment5.params=
comment5.target=int\ getCupsOfSugar()
comment5.text=\n\ @return\ b\n
comment6.params=
comment6.target=int\ getEmptyGlasses()
comment6.text=\n\ @return\ a\n
comment7.params=
comment7.target=int\ getGlassesOfLemonade()
comment7.text=\n\ @return\ c\n
comment8.params=
comment8.target=double\ getPrice()
comment8.text=\n\ @return\ a\ \n
comment9.params=
comment9.target=double\ getIncome()
comment9.text=\n\ @return\ b\n
numComments=21
